// Autogenerated AST node
package org.python.antlr.base;
import org.antlr.runtime.Token;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.core.PyUnicode;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedType;

@ExposedType(name = "_ast.excepthandler", base = AST.class)
public abstract class excepthandler extends PythonTree {

    public static final PyType TYPE = PyType.fromClass(excepthandler.class);
    private final static PyUnicode[] fields = new PyUnicode[0];
    @ExposedGet(name = "_fields")
    public PyUnicode[] get_fields() { return fields; }

    private final static PyUnicode[] attributes =
    new PyUnicode[] {new PyUnicode("lineno"), new PyUnicode("col_offset")};
    @ExposedGet(name = "_attributes")
    public PyUnicode[] get_attributes() { return attributes; }

    public excepthandler() {
    }

    public excepthandler(PyType subType) {
    }

    public excepthandler(int ttype, Token token) {
        super(ttype, token);
    }

    public excepthandler(Token token) {
        super(token);
    }

    public excepthandler(PythonTree node) {
        super(node);
    }

}
